==================
Django Redisession
==================

Another redis-based django session engine for django.contrib.sessions.

Why Another
===========
- verify http://antirez.com/post/redis-weekly-update-7.html and http://redis.io/topics/memory-optimization
, refs concept in them as Hash Mode below.
- do optimizations

Installation
============

#. TODO, setup.py
#. Add `redisession` directory to Python path.
#. Add `redisession` to INSTALLED_APPS in your current settings file.
#. Set SESSION_ENGINE in the settings file:
    ``SESSION_ENGINE='redisession.backend'``

Configuration
=============
Configuration options to the django-redisession can be placed in dict `REDIS_SESSION_CONFIG`:
    - `SERVER` -- If set to a dict then the value will be used as arguments for redis.Redis() to make a redis connection instance. If set to a string then the django-redisession will get redisession.helper.get_redis to lookup the value in `REDIS_CONFIG` for existing connection instance.
    - `USE_HASH` -- If set to True (Hash Mode), the django-redisession will store sessions as items of Redis Hashes. `HASH_KEY_GENERATOR` will be used for generating corresponding Redis keys. If set to False, the data of a session will be stored as Redis String value of the Redis key which is generated by `KEY_GENERATOR`. session keys generated by md5 is not as evenly distribudated as those by sha1, but still acceptable.
      TODO, When in Hash Mode, expire date of a session is stored w/ session data, extra cron job need to be performed to clean up expired session.
    - `KEY_GENERATOR` -- the callable to generate Redis key, or Redis Hash field name when in Hash Mode, for a session. The callable accept session_key as the only parameter. The default generates the binary string, 16 bytes for md5, from session_key which is normally a hex string.
    - `HASH_KEY_GENERATOR` -- the callable to generate Redis key for Redis Hashes, in Hash Mode. The default uses the first two bytes of the binary string of a session_key, and thus distributes sessions to 65536 hashes. Other dispatching logics or key prefix could be achieved by customizing this option.
    - `COMPRESS_LIB` -- the module name of the compress library used to compress session data, leave blank to disable compress. Defaults to 'snappy', refs `snappy <http://code.google.com/p/snappy/>`_ and `python-snappy <https://github.com/andrix/python-snappy>`_ . The compress library should support compress and decompress, such as zlib, lzo, etc.
    - `COMPRESS_MIN_LENGTH` -- the minimal length of the session data to try compress. Defaults to 400.

Examples:

::

    # default: distributes sessions to 65536 Redis Hashes,
    #          use binary string form of session_key,
    #          try to compress data (length >= 400) by using snappy. 
    REDIS_SESSION_CONFIG = {
        'SERVER': {},
        'USE_HASH': True,
        'KEY_GENERATOR': lambda x: x.decode('hex'),
        'HASH_KEY_GENERATOR': lambda x: x[:4].decode('hex'),
        'COMPRESS_LIB': 'snappy',
        'COMPRESS_MIN_LENGTH': 400,
    }
    
::

    # use Redis get/set to store session, store session key just as it is.
    REDIS_SESSION_CONFIG = {
        'USE_HASH': False,
        'KEY_GENERATOR': lambda x: x
    }

You could use redisession.helper.get_redis to get existing redis connection instance by name, after setting `REDIS_CONFIG` in the settings file, just similar to setting DBs in django. For example:

::

    REDIS_CONFIG = {
        # 'name': dict passed to redis.Redis to build a connection instance 
        'default': {'host':'localhost', 'port':6379, 'db':1},
        'foo': {'db':2, unix_socket_path='/tmp/bar'}
    }

then

::

    >>> from redisession.helper import get_redit
    >>> r = get_redis() # get connection instance by 'default' conf
    >>> r = get_redis('foo') # get connection instance by 'foo' conf
